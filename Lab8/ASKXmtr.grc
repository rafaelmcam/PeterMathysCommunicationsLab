options:
  parameters:
    author: rcampello
    category: '[Lab8]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: hb
    hier_block_src_path: '.:'
    id: ASKxmtr_bc
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ASK Xmtr
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: Fs
  id: variable
  parameters:
    comment: ''
    value: '256000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [413, 115]
    rotation: 0
    state: true
- name: M
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [500, 116]
    rotation: 0
    state: true
- name: ASK0_fc_0
  id: ASK0_fc
  parameters:
    a_FB: a_FB
    affinity: ''
    alias: ''
    b_sps: d_sps
    c_ptype: e_ptype
    comment: ''
    d_pparms: f_pparms
    e_fcparms: g_fcparms
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 280]
    rotation: 0
    state: true
- name: ModuleLab62
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\n\nimport\
      \ numpy as np\n\nclass sigSequ:\n    \"\"\" Class for 'sequence' (DT) signals\
      \ \"\"\"\n    type = 'sequence'\n    def __init__(self, sig, FB=100, n0=0):\n\
      \        \"\"\"\n        sig: real- or complex-valued sequence values\n    \
      \    FB:  symbol (or Baud) rate (default 100 Baud)\n        n0:  start index\
      \ of sequence (default 0)\n        \"\"\"\n        self._sig = np.asanyarray(sig)\n\
      \        self._FB = FB\n        self._n0 = n0\n        \n    # Properties\n\
      \    def __len__(self):\n        return len(self._sig)\n    def __str__(self):\
      \         # String representation of object\n        return 'FB={}, n0={}, Nsamp={}'.format(self._FB,self._n0,self._sig.size)\n\
      \    __repr__ = __str__\n    def get_size(self):\n        return self._sig.size\n\
      \    def get_shape(self):\n        return self._sig.shape\n    def get_FB(self):\n\
      \        return self._FB\n    def get_n0(self):\n        return self._n0\n \
      \   \n    # Methods\n    def indexAxis(self):\n        return self._n0 + np.arange(len(self._sig))\n\
      \    def signal(self):\n        return self._sig\n    def copy(self):\n    \
      \    return np.copy(self)\n    def scale_and_offset(self, a, b=0):\n       \
      \ \"\"\" x[n]_out = a*x[n]_in + b \"\"\"\n        return sigSequ(a*self._sig\
      \ + b, self._FB, self._n0)\n\n\nclass sigWave:\n    \"\"\" Class for 'waveform'\
      \ (pseudo-CT) signals \"\"\"\n    type = 'waveform'\n    def __init__(self,\
      \ sig, Fs=8000, t0=0):\n        \"\"\"\n        sig:  real or complex-valued\
      \ waveform samples\n        Fs:   sampling rate (default 8000 samples/sec)\n\
      \        t0:   start time of waveform in seconds (default 0)\n        \"\"\"\
      \n        self._sig = np.asanyarray(sig)\n        self._Fs = Fs\n        self._t0\
      \ = t0\n        self._shape = np.shape(self._sig)\n        if len(self._shape)\
      \ > 1:\n        \t   self._Nsamp = len(self._sig[0])\n        else:\n      \
      \  \t   self._Nsamp = len(self._sig)\n        self._tlen = self._Nsamp/float(self._Fs)\n\
      \        self._tend = self._t0 + (self._Nsamp-1)/float(self._Fs)\n\n    # Properties\n\
      \    def __len__(self):\n        return self._Nsamp    # Returns length in samples\n\
      \    def __str__(self):        # String representation of object\n        return\
      \ 'Fs={}, t0={}, tlen={}'.format(self._Fs,self._t0,self._tlen)\n    __repr__\
      \ = __str__\n    def get_shape(self):\n    \t  return self._shape    # Returns\
      \ shape of signal array\n    def get_Fs(self):\n    \t  return self._Fs    \
      \   # Returns sampling rate\n    def get_t0(self):\n    \t  return self._t0\
      \       # Returns start time\n    def get_tlen(self):\n    \t  return self._tlen\
      \     # Returns length in seconds\n    def get_avgpwr(self):     # Returns average\
      \ power\n    \t  return np.mean(np.power(np.abs(self._sig),2.0))\n    def get_tend(self):\n\
      \    \t  return self._tend     # Returns end time\n    def set_t0(self, t0):\n\
      \    \t  self._t0 = t0         # Set new start time\n    \t  self._tend = self._t0\
      \ + (self._Nsamp-1)/float(self._Fs)\t  \n\n    # Methods        \n    def timeAxis(self):\
      \       # Generate time axis\n        return self._t0 + np.arange(self._Nsamp)/float(self._Fs)\
      \ \n    def signal(self):         # Return the waveform\n        return self._sig\n\
      \    def copy(self):           # Make a copy of a sigWave object\n        return\
      \ np.copy(self)\n    def normalized(self):     # Normalize the signal to -1,+1\
      \ range\n        new_sig = 1.0/np.max(abs(self._sig))*self._sig\n        return\
      \ sigWave(new_sig, self._Fs, selt._t0)\n    def scale(self, factor):  # Make\
      \ a scaled copy of a sigWave object\n        return sigWave(factor*self._sig,\
      \ self._Fs, self._t0)\n    def pwrx(self, x):        # Raise the signal to power\
      \ x\n        return sigWave(np.power(self._sig, x), self._Fs, self._t0)\n  \
      \  def apwrx(self, x):       # Raise absolute value of signal to power x\n \
      \       return sigWave(np.power(np.abs(self._sig), x), self._Fs, self._t0)\n\
      \              \n        \n         \n\ndef pamhRt(sps, ptype, pparms=[]):\n\
      \    \"\"\"\n    PAM normalized matched filter (MF) receiver filter h_R(t) =\
      \ h_R(n*TB/sps) generation\n    >>>>> hRt = pamhRt(sps, ptype, pparms) <<<<<\n\
      \        where\n            sps: samples per symbol\n            ptype: pulse\
      \ type from list (\u2019man\u2019, \u2019rcf\u2019, \u2019rect\u2019, \u2019\
      rrcf\u2019, \u2019sinc\u2019, \u2019tri\u2019)\n            pparms not used\
      \ for \u2019man\u2019, \u2019rect\u2019, \u2019tri\u2019\n            pparms\
      \ = [k, alpha] for \u2019rcf\u2019, \u2019rrcf\u2019\n            pparms = [k,\
      \ beta] for \u2019sinc\u2019\n            k: \"tail\" truncation parameter for\
      \ \u2019rcf\u2019, \u2019rrcf\u2019, \u2019sinc\u2019 (truncates p(t) to -k*sps\
      \ <= n < k*sps)\n            alpha: Rolloff parameter for \u2019rcf\u2019, \u2019\
      rrcf\u2019, 0 <= alpha <= 1\n            beta: Kaiser window parameter for 'sinc'\n\
      \            hRt: Matched Filter impulse response h_R(t) at t = n*TB/sps\n \
      \       Note: sps = Fs / FB\n    \"\"\"\n    # time reversed and normalized\n\
      \    pt = pampt(sps, ptype, pparms)\n    ht = pt[::-1]\n    hRt = ht / np.sum(np.power(pt,2.0))\n\
      \    return hRt\n\n\n\ndef pampt(sps, ptype, pparms=[]):\n    \"\"\"\n    PAM\
      \ pulse p(t) = p(n*TB/sps) generation\n    >>>>> pt = pampt(sps, ptype, pparms)\
      \ <<<<<\n    where sps:\n    ptype: pulse type (\u2019rect\u2019, \u2019sinc\u2019\
      , \u2019tri\u2019, 'man', 'rcf', 'rrcf')\n    pparms not used for \u2019rect\u2019\
      , \u2019tri\u2019, 'man'\n    pparms = [k, beta] for sinc\n    pparms = [k,\
      \ alpha] for rcf and rrcf\n    k:\n    \"tail\" truncation parameter for \u2019\
      sinc\u2019\n    (truncates p(t) to -k*sps <= n < k*sps)\n    beta: Kaiser window\
      \ parameter for \u2019sinc\u2019\n    pt:\n    pulse p(t) at t=n*TB/sps\n  \
      \  Note: In terms of sampling rate Fs and baud rate FB,\n    \"\"\"\n\n    if\
      \ ptype == \"rect\":\n        pt = np.ones(shape=(sps,), dtype=np.float32)\n\
      \    elif ptype == \"tri\":\n        def tri_pulse(size):\n            nt =\
      \ size - 1\n            p1 = np.arange(nt // 2) / (nt / 2)\n            p2 =\
      \ 1 - np.arange(nt - nt // 2 + 1) / (nt - nt // 2)\n            return np.concatenate((p1,\
      \ p2[:-1]))\n        pt = tri_pulse(2 * sps + 1)\n    elif ptype == \"sinc\"\
      :\n        k, beta = pparms\n        # -k a k (defini\xE7\xE3o anterior)? -2k\
      \ a 2k (padding a esquerda e a direita)?\n        tt = np.arange(-k * 1 * sps,\
      \ k * 1 * sps) / sps\n        pt = np.sinc(tt)\n        pwt = pt * np.kaiser(pt.size,\
      \ beta)\n        pt = pwt\n    elif ptype == \"man\":\n        pt = np.ones(shape=(sps,),\
      \ dtype=np.float32)\n        pt[sps//2:] = -1\n    elif ptype == \"rcf\":\n\
      \        k, alpha = pparms\n        tt = np.arange(-k * 1 * sps, k * 1 * sps)\
      \ / sps\n        pt = np.sinc(tt) * np.cos(np.pi*alpha*tt)\n        for i in\
      \ range(len(tt)):\n            vl = 1 - ((2 * alpha * tt[i]) ** 2)\n       \
      \     if vl == 0:\n                pt[i] = 0\n            else:\n          \
      \      pt[i] /= vl\n    elif ptype == \"rrcf\":\n        k, alpha = pparms\n\
      \        ttp = np.arange(-k * 1 * sps, k * 1 * sps) / sps\n        pt = np.empty(shape=(ttp.size,))\n\
      \        Fb = 1\n        if alpha == 0:\n            alpha += 1e-5\n       \
      \ for idx in range(len(ttp)):\n            if ttp[idx] == 0:\n             \
      \   pt[idx] = 1 - alpha + (4 * alpha) / np.pi\n            elif abs(ttp[idx])\
      \ == 1 / (4 * alpha * Fb):\n                pt[idx] = (alpha / np.sqrt(2)) *\
      \ ((1 + 2 / np.pi) * np.sin(np.pi / (4 * alpha)) + (1 - 2 / np.pi) * np.cos(np.pi\
      \ / (4 * alpha)))\n            else:\n                pt[idx] = (1 / (Fb * np.pi))\
      \ * (np.sin((1 - alpha)*np.pi*ttp[idx]*Fb) + (4*alpha*ttp[idx]*Fb) * np.cos((1+alpha)*np.pi*ttp[idx]*Fb))\n\
      \                pt[idx] /= ((1 - (4 * alpha * ttp[idx] * Fb) ** 2) * ttp[idx])\n\
      \    else:\n        raise NotImplementedError(\"p(t) not implemented: \", ptype)\n\
      \    return pt\n\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 111]
    rotation: 0
    state: true
- name: a_FB
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Baud Rate
    short_id: ''
    type: intx
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [193, 10]
    rotation: 0
    state: true
- name: b_bpsym
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Bits per Symbol
    short_id: ''
    type: intx
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [310, 11]
    rotation: 0
    state: true
- name: blocks_add_const_vxx_0
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: -(M - 1) if c_pol else 0
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [702, 312]
    rotation: 0
    state: true
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 0.5 if c_pol else 1.0
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [513, 312]
    rotation: 0
    state: true
- name: blocks_packed_to_unpacked_xx_0
  id: blocks_packed_to_unpacked_xx
  parameters:
    affinity: ''
    alias: ''
    bits_per_chunk: b_bpsym
    comment: ''
    endianness: gr.GR_LSB_FIRST
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [297, 304]
    rotation: 0
    state: true
- name: c_pol
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Polar
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [449, 13]
    rotation: 0
    state: true
- name: d_sps
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Samples per Symbol
    short_id: ''
    type: intx
    value: '8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [540, 14]
    rotation: 0
    state: true
- name: e_ptype
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Pulse Type
    short_id: ''
    type: str
    value: '"rect"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [703, 15]
    rotation: 0
    state: true
- name: f_pparms
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Pulse Params
    short_id: ''
    type: ''
    value: (5, 0.3)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [822, 14]
    rotation: 0
    state: true
- name: g_fcparms
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: fc Params
    short_id: ''
    type: ''
    value: (32000, 0)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [953, 16]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [210, 109]
    rotation: 0
    state: enabled
- name: import_1
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [574, 117]
    rotation: 0
    state: true
- name: pad_sink_0
  id: pad_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: out
    num_streams: '1'
    optional: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1124, 312]
    rotation: 0
    state: true
- name: pad_source_0
  id: pad_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: in
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '1'
    optional: 'False'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [113, 312]
    rotation: 0
    state: true

connections:
- [ASK0_fc_0, '0', pad_sink_0, '0']
- [blocks_add_const_vxx_0, '0', ASK0_fc_0, '0']
- [blocks_char_to_float_0, '0', blocks_add_const_vxx_0, '0']
- [blocks_packed_to_unpacked_xx_0, '0', blocks_char_to_float_0, '0']
- [pad_source_0, '0', blocks_packed_to_unpacked_xx_0, '0']

metadata:
  file_format: 1
